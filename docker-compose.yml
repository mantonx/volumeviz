services:
  postgres:
    image: postgres:15-alpine
    container_name: volumeviz-db
    environment:
      POSTGRES_USER: ${DB_USER:-volumeviz}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-volumeviz}
      POSTGRES_DB: ${DB_NAME:-volumeviz}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - volumeviz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-volumeviz}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: volumeviz-backend
    command: ["/app/volumeviz"]
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-volumeviz}
      DB_PASSWORD: ${DB_PASSWORD:-volumeviz}
      DB_NAME: ${DB_NAME:-volumeviz}
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
    volumes:
      # Docker API access
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Docker volumes directory for direct scanning
      - /var/lib/docker/volumes:/var/lib/docker/volumes:ro
      # Direct CIFS mount access as fallback
      - /cifs/fictionalserver/tv:/mnt/tv-shows:ro
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      test-container:
        condition: service_started
    networks:
      - volumeviz-network
    restart: unless-stopped
    # Run as root to access Docker volumes
    user: root

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: volumeviz-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - volumeviz-network
    restart: unless-stopped

  # Test container that uses the TV shows volume
  test-container:
    image: nginx:alpine
    container_name: volumeviz-test-tv
    volumes:
      # Mount the TV shows volume as read-only
      - tv-shows-readonly:/usr/share/nginx/html/tv:ro
    ports:
      - "8082:80"
    networks:
      - volumeviz-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

  # TV shows volume using CIFS mount
  tv-shows-readonly:
    driver: local
    driver_opts:
      type: none
      device: /cifs/fictionalserver/tv
      o: bind,ro

networks:
  volumeviz-network:
    driver: bridge