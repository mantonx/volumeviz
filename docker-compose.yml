name: volumeviz

services:
  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: volumeviz-db
    environment:
      POSTGRES_USER: ${DB_USER:-volumeviz}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-volumeviz}
      POSTGRES_DB: ${DB_NAME:-volumeviz}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - volumeviz
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-volumeviz} -d ${DB_NAME:-volumeviz}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Security: run as non-root postgres user
    user: postgres

  # Backend API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: volumeviz-api
    command: ["/app/volumeviz"]
    environment:
      # Server configuration
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      SERVER_PORT: ${API_PORT:-8080}
      GIN_MODE: ${GIN_MODE:-release}
      
      # Database configuration
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-volumeviz}
      DB_PASSWORD: ${DB_PASSWORD:-volumeviz}
      DB_NAME: ${DB_NAME:-volumeviz}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      
      # Docker configuration
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
      DOCKER_TIMEOUT: ${DOCKER_TIMEOUT:-30s}
      
      # CORS configuration
      ALLOW_ORIGINS: ${ALLOW_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Metrics
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: ${METRICS_PORT:-9090}
    volumes:
      # Docker API access
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Docker volumes directory for direct scanning
      - /var/lib/docker/volumes:/var/lib/docker/volumes:ro
      # User volume mounts (example - adjust for your environment)
      # - /path/to/user/volumes:/mnt/user-volumes:ro
    ports:
      - "${API_PORT:-8080}:${API_PORT:-8080}"
      - "${METRICS_PORT:-9090}:${METRICS_PORT:-9090}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - volumeviz
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${API_PORT:-8080}/api/v1/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Security: Must run as root to access Docker socket and volume directories
    # This is documented as a security consideration in SECURITY.md
    user: root

  # Frontend web service
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: volumeviz-web
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "3000"]
    environment:
      # Frontend configuration
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080/api/v1}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8080/api/v1/ws}
      VITE_ENABLE_WEBSOCKET: ${VITE_ENABLE_WEBSOCKET:-false}
      VITE_ENABLE_POLLING: ${VITE_ENABLE_POLLING:-true}
      VITE_POLLING_INTERVAL: ${VITE_POLLING_INTERVAL:-30000}
      VITE_MAX_CONCURRENT_SCANS: ${VITE_MAX_CONCURRENT_SCANS:-3}
      VITE_ENABLE_DEBUG: ${VITE_ENABLE_DEBUG:-false}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - volumeviz
    restart: unless-stopped
    # Security: Frontend can run as non-root
    # Note: Depending on the Dockerfile, this may need adjustment

  # Test container for development - demonstrates user-mounted volume
  test-container:
    image: nginx:alpine
    container_name: volumeviz-test-nginx
    volumes:
      # Example user-mounted volume (adjust path as needed)
      # This creates a volume that VolumeViz can discover and monitor
      - test_volume:/usr/share/nginx/html:ro
    ports:
      - "8082:80"
    networks:
      - volumeviz
    restart: unless-stopped
    profiles:
      - dev
      - test
    # Security: run as non-root nginx user
    user: nginx

volumes:
  # PostgreSQL data volume
  postgres_data:
    driver: local

  # Test volume for development
  test_volume:
    driver: local
    # Example configuration for CIFS/NFS mount
    # Uncomment and adjust for your environment
    # driver_opts:
    #   type: none
    #   device: /path/to/your/data
    #   o: bind,ro

networks:
  volumeviz:
    driver: bridge
    name: volumeviz